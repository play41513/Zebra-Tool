//---------------------------------------------------------------------------


#pragma hdrstop

#include <vcl.h>
#include "FileControlBase.h"
//---------------------------------------------------------------------------

#pragma package(smart_init)

cFileControl::cFileControl(INI_DESCRIPOR *ini)
{
	INI_Desc = ini;
}
bool cFileControl::FindINIFile()
{
	TSearchRec Sr;
	TStringList * FileList=new TStringList();
	if(FindFirst("*.ini",faAnyFile,Sr)==0)
	{
		do
		{
			FileList->Add(Sr.Name);
		}
		while(FindNext(Sr)==0);
		FindClose(Sr);
	}
	if(FileList->Count>1||FileList->Count==0)
	{
		delete FileList;
		return false;
	}
	else
	{
		strSettingINI = ExtractFilePath(Application->ExeName)+FileList->Strings[0];
		INI_Desc->ININame = FileList->Strings[0].SubString(1,FileList->Strings[0].Pos(".")-1);
		ReadINIFile();
		delete FileList;
		return true;
	}
}
void cFileControl::WritePSUNameToFile(DWORD Index,AnsiString Value)
{
	TIniFile *ini;
	String fn = ChangeFileExt(strSettingINI, ".ini");
	ini = new TIniFile(fn);

	ini->WriteString("PSU","Name"+AnsiString(Index),Value);
	delete ini;
	ini = NULL;
}
void cFileControl::WritePSUCOMToFile(DWORD Index,AnsiString Value)
{
	TIniFile *ini;
	String fn = ChangeFileExt(strSettingINI, ".ini");
	ini = new TIniFile(fn);

	ini->WriteString("PSU","COM"+AnsiString(Index),Value);
	delete ini;
	ini = NULL;
}
void cFileControl::ReadINIFile()
{
	AnsiString value;
	TIniFile *ini;
	String fn = ChangeFileExt(strSettingINI, ".ini");
	ini = new TIniFile(fn);

	INI_Desc->dbH_BitVoltage
		= ini->ReadFloat("Parameter","H_BitVoltage",0.02470703125);
	INI_Desc->dbL_BitVoltage
		= ini->ReadFloat("Parameter","L_BitVoltage",0.01530761718);
	INI_Desc->dwLoopDelay
		= ini->ReadInteger("Parameter","MainThreadLoopDalay",1);

	INI_Desc->dwPSUSettingCount
		= ini->ReadInteger("Setting","Count",1);
	for(int i = 0;i < (int)INI_Desc->dwPSUSettingCount ; i++)
	{
		INI_Desc->PITEM_DESCRIPOR[i].FileName
			= ini->ReadString("Setting","File"+AnsiString(i+1),"");
	}
	INI_Desc->PITEM_SWITCH_SETTING.Enable
		= ini->ReadBool("SwitchSetting","Enable",false);
	INI_Desc->PITEM_SWITCH_SETTING.Message
		= ini->ReadString("SwitchSetting","Message","");
	INI_Desc->PITEM_SWITCH_SETTING.DetectADIndex
		= ini->ReadInteger("SwitchSetting","DetectADIndex",0);
	INI_Desc->PITEM_SWITCH_SETTING.DetectADValue
		=  ini->ReadFloat("SwitchSetting","ADValueMin",0);
	INI_Desc->PSUCOMNum[0]
		= ini->ReadString("PSU","COM1","");
	INI_Desc->PSUCOMNum[1]
		= ini->ReadString("PSU","COM2","");

	delete ini;
	ini = NULL;

	for(int i = 0;i < (int)INI_Desc->dwPSUSettingCount ; i++)
	{
		fn = ChangeFileExt(ExtractFilePath(Application->ExeName)+INI_Desc->PITEM_DESCRIPOR[i].FileName, ".txt");
		ini = new TIniFile(fn);

		INI_Desc->PITEM_DESCRIPOR[i].dwPSUCount
			= ini->ReadInteger("Parameter","PSUCount",1);
		INI_Desc->PITEM_DESCRIPOR[i].dwPSUFailCount
        	= ini->ReadInteger("Parameter","PSUFailCount",1);
		for(int j = 0 ; j < (int)INI_Desc->PITEM_DESCRIPOR[i].dwPSUCount ; j++)
		{
			//INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].Name
			//	= ini->ReadString("PSU"+AnsiString(j+1),"Name","PSS");
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].dbVoltage
				= ini->ReadInteger("PSU"+AnsiString(j+1),"Voltage",1000);
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].dbSurgeCurrent
				= ini->ReadInteger("PSU"+AnsiString(j+1),"SurgeCurrent",1000);
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].dbCurrent
				= ini->ReadInteger("PSU"+AnsiString(j+1),"Current",1000);
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].dwDelayTime
				= ini->ReadInteger("PSU"+AnsiString(j+1),"Delay",1000);
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].dbCurrentMin
				= ini->ReadInteger("PSU"+AnsiString(j+1),"CurrentMin",10);
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].dbCurrentMax
				= ini->ReadInteger("PSU"+AnsiString(j+1),"CurrentMax",10);
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].bOCP
				= ini->ReadBool("PSU"+AnsiString(j+1),"OCP",false);
			INI_Desc->PITEM_DESCRIPOR[i].PPSU_DESCRIPOR[j].dwPASSCount
                = ini->ReadInteger("PSU"+AnsiString(j+1),"PASSCount",3);
		}
		for(int k = 0 ; k < 15 ; k++)
		{
			INI_Desc->PITEM_DESCRIPOR[i].PITEM_AD_DESCRIPOR[k].bTest
				=  ini->ReadBool("PowerUSB_"+AnsiString(k+1),"Test",false);
			INI_Desc->PITEM_DESCRIPOR[i].PITEM_AD_DESCRIPOR[k].dbVoltageMin
				=  ini->ReadFloat("PowerUSB_"+AnsiString(k+1),"MinVoltage",0);
			INI_Desc->PITEM_DESCRIPOR[i].PITEM_AD_DESCRIPOR[k].dbVoltageMax
				=  ini->ReadFloat("PowerUSB_"+AnsiString(k+1),"MaxVoltage",0);
			INI_Desc->PITEM_DESCRIPOR[i].PITEM_AD_DESCRIPOR[k].dbLossVoltage
				=  ini->ReadFloat("PowerUSB_"+AnsiString(k+1),"LossVoltage",0);
			value = ini->ReadString("PowerUSB_"+AnsiString(k+1),"BitVoltage","L");
			INI_Desc->PITEM_DESCRIPOR[i].PITEM_AD_DESCRIPOR[k].dbBitVoltage
				= value == "H" ? INI_Desc->dbH_BitVoltage : INI_Desc->dbL_BitVoltage;
			INI_Desc->PITEM_DESCRIPOR[i].PITEM_AD_DESCRIPOR[k].dwADPortNum
				= ini->ReadInteger("PowerUSB_"+AnsiString(k+1),"ADNum",0);
			INI_Desc->PITEM_DESCRIPOR[i].PITEM_AD_DESCRIPOR[k].Name
				= ini->ReadString("PowerUSB_"+AnsiString(k+1),"Name","");
		}
		delete ini;
		ini = NULL;
	}

}
