//---------------------------------------------------------------------------

#ifndef mainH
#define mainH

#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
//---------------------------------------------------------------------------
#include <dbt.h> //DBT_常數 註冊要取得的裝置消息
#include "HID.h"
#include "IO_Request.h"
#include "DeviceNotify.h"
#include "PSU_control.h"
#include <Buttons.hpp>
#include <ExtCtrls.hpp>
#include <ComCtrls.hpp>
#include "Gauges.hpp"
#include "cspin.h"
#include <Graphics.hpp>
#include <queue>
#include <fstream>
#include <Buttons.hpp>
#include <Registry.hpp>
#include <ExtCtrls.hpp>
#include <Mask.hpp>
#include <Grids.hpp>

const AnsiString APP_TITLE = "Zebra Test Tool  ver 1.0.0 ( Action Star Enterprise Co., Ltd. )";
const AnsiString PASSWORD  = "SET";
const char FILE_DUT_SET_INI[] = "SET.ini";

//
const AnsiString CHANGE_AD_PORT_NUM = "03 13 BB 0F "; //後面接00 ~ 0F
const AnsiString ReadADValue = "03 13 E8 FF 90";

const float H_UNIT = 0.0211; //H_單位元電壓值
const float L_UNIT = 0.0056; //L_單位元電壓值

//GUID
const char GUID_USB_HUB[] = "{F18A0E88-C30C-11D0-8815-00A0C906BED8}";
const char GUID_USB_DEVICE[] = "{A5DCBF10-6530-11D2-901F-00C04FB951ED}";
const char GUID_HID[] = "{4d1e55b2-f16f-11cf-88cb-001111000030}";

// HID PVID
const wchar_t PD_BOARD_PVID[] = L"hid#vid_0835&pid_fe01";

// ERROR MSG
const AnsiString MSG_VOLTAGE_FAIL 			= "電壓異常";
const AnsiString MSG_CURRENT_FAIL 			= "電流異常";
const AnsiString MSG_DUT_OCP	 			= "短路";
const AnsiString MSG_NOT_FIND_ZEBRA_BOARD 	= "找不到ZEBRA板";
const AnsiString MSG_NOT_FIND_PSU 			= "找不到電源供應器";
const AnsiString MSG_PSU_NO_RESPOND 		= "電源供應器沒有回應";
const AnsiString MSG_NOT_FIND_SET_INI 		= "找不到設定ini檔";
//
#define GET_VALUE_TIMEOUT_MS 10
#define TIME_INTERVAL 200
#define H_HARDWARE_VOLTAGE_COMPENSATION(voltage0) (((voltage0.ToDouble())*H_UNIT)-0.075)/0.99
#define L_HARDWARE_VOLTAGE_COMPENSATION(voltage0) (((voltage0.ToDouble())*L_UNIT)-0.014)/0.984

#define HID_IS_ONLINE		0
#define HID_TURN_ON			1
#define CHANGE_AD_PORT		2
#define READ_AD_VALUE		3
#define TEST_VOLTAGE_PASS	4
#define TEST_VOLTAGE_FAIL	5
#define HID_NOT_FIND		6



#define DEBUG(String)    FrmMain->moDebug->Lines->Add(String)

//---------------------------------------------------------------------------

class TFrmMain : public TForm
{
__published:	// IDE-managed Components
	TMemo *moDebug;
	TBitBtn *btnStart;
	TPanel *pl_Auto0;
	TCheckBox *ckbAuto;
	TPanel *Panel7;
	TPanel *pl_AD15;
	TPanel *plAD15;
	TPanel *pl_read_voltage_ad_15;
	TTimer *Timer1;
	TPanel *pl_Main;
	TPanel *pl_Set_Switch;
	TPanel *plSet;
	TPanel *pl_PSU_title;
	TPanel *Panel14;
	TPanel *plAD14;
	TEdit *edtADSet14;
	TPanel *pl_pin14;
	TPanel *Panel10;
	TPanel *plAD13;
	TEdit *edtADSet13;
	TPanel *pl_pin13;
	TPanel *Panel15;
	TPanel *plAD12;
	TEdit *edtADSet12;
	TPanel *pl_pin12;
	TPanel *Panel19;
	TPanel *plAD11;
	TEdit *edtADSet11;
	TPanel *pl_pin11;
	TPanel *Panel23;
	TPanel *plAD10;
	TEdit *edtADSet10;
	TPanel *pl_pin10;
	TPanel *Panel27;
	TPanel *plAD9;
	TEdit *edtADSet9;
	TPanel *pl_pin9;
	TPanel *Panel31;
	TPanel *plAD8;
	TEdit *edtADSet8;
	TPanel *pl_pin8;
	TPanel *Panel35;
	TPanel *plAD7;
	TEdit *edtADSet7;
	TPanel *pl_pin7;
	TPanel *Panel39;
	TPanel *plAD6;
	TEdit *edtADSet6;
	TPanel *pl_pin6;
	TPanel *Panel43;
	TPanel *plAD5;
	TEdit *edtADSet5;
	TPanel *pl_pin5;
	TPanel *Panel47;
	TPanel *plAD4;
	TEdit *edtADSet4;
	TPanel *pl_pin4;
	TPanel *Panel51;
	TPanel *plAD3;
	TEdit *edtADSet3;
	TPanel *pl_pin3;
	TPanel *Panel54;
	TPanel *plAD2;
	TEdit *edtADSet2;
	TPanel *pl_pin2;
	TPanel *Panel57;
	TPanel *plAD1;
	TEdit *edtADSet1;
	TPanel *pl_pin1;
	TPanel *Panel60;
	TPanel *plAD0;
	TEdit *edtADSet0;
	TPanel *pl_pin0;
	TPanel *Panel63;
	TPanel *Panel64;
	TPanel *Panel65;
	TPanel *Panel66;
	TPanel *Panel67;
	TImage *Image3;
	TPanel *plPSU;
	TPanel *Panel69;
	TPanel *Panel70;
	TEdit *edtPSUCur;
	TEdit *edtPSUVol;
	TPanel *Panel68;
	TEdit *edtPassWord;
	TBitBtn *btnSet;
	TPanel *Panel71;
	TPanel *pl_Right;
	TLabel *Label1;
	TComboBox *cbDefault_Device;
	TPanel *Panel72;
	TPanel *Panel73;
	TPanel *Panel74;
	TPanel *Panel75;
	TPanel *pl_Auto1;
	TPanel *pl_Auto2;
	TPanel *pl_Auto3;
	TPanel *pl_Auto4;
	TPanel *pl_Auto5;
	TPanel *pl_Auto6;
	TPanel *pl_Auto7;
	TPanel *pl_Auto8;
	TPanel *pl_Auto9;
	TPanel *pl_Auto10;
	TPanel *pl_Auto11;
	TPanel *pl_Auto12;
	TPanel *pl_Auto14;
	TPanel *pl_Auto13;
	TPanel *Panel8;
	TPanel *pl_read_voltage_ad_0;
	TPanel *pl_read_voltage_ad_1;
	TPanel *pl_read_voltage_ad_2;
	TPanel *pl_read_voltage_ad_3;
	TPanel *pl_read_voltage_ad_4;
	TPanel *pl_read_voltage_ad_5;
	TPanel *pl_read_voltage_ad_6;
	TPanel *pl_read_voltage_ad_7;
	TPanel *pl_read_voltage_ad_8;
	TPanel *pl_read_voltage_ad_9;
	TPanel *pl_read_voltage_ad_10;
	TPanel *pl_read_voltage_ad_11;
	TPanel *pl_read_voltage_ad_12;
	TPanel *pl_read_voltage_ad_13;
	TPanel *pl_read_voltage_ad_14;
	TPanel *Panel11;
	TPanel *pl_sys_power;
	TPanel *pl_result;
	TPanel *pl_Msg;
	TEdit *edt_min;
	TEdit *edt_max;
	TPanel *Panel16;
	TPanel *pl_Staus;
	bool __fastcall HID_ReadReport(AnsiString Value,bool DEBUG);
	void __fastcall EnumHID();
	void __fastcall UI_DisplayCmd(unsigned char *pBuf, int size,bool DEBUG);
	void __fastcall btnStartClick(TObject *Sender);
	void __fastcall pl_Auto0Click(TObject *Sender);
	void __fastcall FormClose(TObject *Sender, TCloseAction &Action);
	void __fastcall ckbAutoClick(TObject *Sender);
	void __fastcall plAD0Click(TObject *Sender);
	void __fastcall Timer1Timer(TObject *Sender);
	void __fastcall edtADSet0Change(TObject *Sender);
	void __fastcall edtADSet0Exit(TObject *Sender);
	void __fastcall pl_Set_SwitchClick(TObject *Sender);
	void __fastcall moDebugChange(TObject *Sender);
	void __fastcall btnSetClick(TObject *Sender);
	void __fastcall edtPassWordEnter(TObject *Sender);
	void __fastcall cbDefault_DeviceExit(TObject *Sender);
	void __fastcall cbDefault_DeviceSelect(TObject *Sender);
	void __fastcall edt_minChange(TObject *Sender);
	void __fastcall edt_minExit(TObject *Sender);


private:	// User declarations
	HID m_hid;
	IO_Request m_ir, m_or;
	AnsiString m_ADValue;
	int SET_PSU_VOLTAGE_Parameter;
	int SET_PSU_CURRENT_Parameter;

	void Tx(AnsiString Value,bool DEBUG);
	bool Rx(AnsiString Value,bool DEBUG);
	void Rx_ValueAnalyze(AnsiString Value);
	bool HID_TurnOn();
	void HID_TurnOff();
	void Voltage_Test(AnsiString CMD,TPanel *pl_main,TPanel *pl_read,float voltage);

	//
	int  PSU_Voltage_Test();
	bool open_psu_com();

	int  HexToInt(AnsiString HexStr);
	bool ReadInISet();
	void SetInIVal(AnsiString DUTNAME);
	void SetValueEnabled(bool Enabled);
	void MODIFY_DEFAULT_VALUE();
	AnsiString Findfilemsg(AnsiString filename, AnsiString findmsg,int rownum);
	//
	//USB拔插消息
	DeviceNotification g_DeviceNogification;
	TWndMethod OldWindowProc;
	void __fastcall MyWindowProc(TMessage&);
public:		// User declarations
	int now_step;

	int SET_AVG_CURRENT;
	int init_time;
	bool bError_Happened;
	AnsiString Error_Msg;
	AnsiString DEFAULT_DEVICE;
	AnsiString DeviceCOM;
	queue<AnsiString> que_cmd;

	void QueueClear();
	void Delay(int iMilliSeconds);

	cPSU *CL_PSU_CONTROL;

	AnsiString ERROR_MSG;
	__fastcall TFrmMain(TComponent* Owner);
};
//---------------------------------------------------------------------------
extern PACKAGE TFrmMain *FrmMain;
//---------------------------------------------------------------------------
#endif
